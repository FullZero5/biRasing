import React, { useState } from 'react';
import { useMultiplayerState, myPlayer, usePlayersList, isHost } from 'playroomkit';
import RacerSlider from './components/RacerSlider';
import RaceScreen from './components/RaceScreen';
import './App.css';

const App = () => {
  const players = usePlayersList();
  const [playerChoices, setPlayerChoices] = useMultiplayerState("racerChoices", {});
  const [raceStarted, setRaceStarted] = useMultiplayerState("raceStarted", false);
  const [localRaceStarted, setLocalRaceStarted] = useState(false);
  const myPlayerId = myPlayer()?.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç –ª–∏ –≥–æ–Ω—â–∏–∫ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–æ–º
  const isRacerTaken = (racerId) => {
    return Object.values(playerChoices).some(choice => choice.id === racerId);
  };

  // –í—ã–±–æ—Ä –≥–æ–Ω—â–∏–∫–∞
  const handleSelectRacer = (racer) => {
    if (!myPlayerId) return;
    
    if (playerChoices[myPlayerId]?.id === racer.id) {
      const newChoices = { ...playerChoices };
      delete newChoices[myPlayerId];
      setPlayerChoices(newChoices);
      return;
    }

    if (!isRacerTaken(racer.id)) {
      setPlayerChoices({
        ...playerChoices,
        [myPlayerId]: racer
      });
    }
  };

  // –ü–æ–ª—É—á–∞–µ–º –≥–æ–Ω—â–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
  const myRacer = myPlayerId ? playerChoices[myPlayerId] : null;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ –≥–æ–Ω—â–∏–∫–æ–≤
  const allPlayersReady = players.length > 0 && players.every(player => playerChoices[player.id]);

  // –ó–∞–ø—É—Å–∫ –≥–æ–Ω–∫–∏
  const startRace = () => {
    if (allPlayersReady && isHost()) {
      setRaceStarted(true);
      setLocalRaceStarted(true);
      console.log("–ì–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å!");
    }
  };

  // –í–æ–∑–≤—Ä–∞—Ç –≤ –ª–æ–±–±–∏
  const backToLobby = () => {
    if (isHost()) {
      setRaceStarted(false);
    }
    setLocalRaceStarted(false);
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏
  React.useEffect(() => {
    if (raceStarted) {
      setLocalRaceStarted(true);
    } else {
      setLocalRaceStarted(false);
    }
  }, [raceStarted]);
  if (!myPlayerId) {
    return (
      <div className="loading-screen">
        <div className="loading-spinner"></div>
        <p>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–≥—Ä–µ...</p>
      </div>
    );
  }

  // –ï—Å–ª–∏ –≥–æ–Ω–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –≥–æ–Ω–∫–∏
  if (localRaceStarted) {
    return <RaceScreen onBackToLobby={backToLobby} />;
  }

  return (
    <div className="app-container">
      {isHost() && (
        <div className="host-indicator">
          ‚òÖ –í—ã —Ö–æ—Å—Ç
        </div>
      )}
      <div className="main-content">
        <RacerSlider
          onSelectRacer={handleSelectRacer}
          selectedRacer={myRacer}
          isRacerTaken={isRacerTaken}
        />

        {/* –°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤ */}
        <div className="players-status">
          <h3>–°—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–æ–≤:</h3>
          <div className="players-list">
            {players.map(player => {
              const playerRacer = playerChoices[player.id];
              const isMe = player.id === myPlayerId;
              
              return (
                <div key={player.id} className="player-status-item">
                  <img 
                    src={player.getProfile().photo} 
                    alt="Avatar" 
                    className={`player-avatar ${isMe ? 'my-avatar' : ''}`}
                  />
                  <span className="player-name">
                    {player.getProfile().name || `–ò–≥—Ä–æ–∫ ${player.id.slice(0, 4)}`}
                    {isMe && " (–í—ã)"}
                  </span>
                  <span className={`status ${
                    playerRacer ? 'ready' : 'choosing'
                  }`}>
                    {playerRacer ? `‚úÖ ${playerRacer.name}` : '–í—ã–±–∏—Ä–∞–µ—Ç...'}
                  </span>
                </div>
              );
            })}
          </div>
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ */}
        <div className="readiness-info">
          <div className={`readiness-indicator ${allPlayersReady ? 'ready' : 'waiting'}`}>
            {allPlayersReady ? 'üéâ –í—Å–µ –≥–æ—Ç–æ–≤—ã –∫ –≥–æ–Ω–∫–µ!' : '‚è≥ –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤...'}
          </div>
          
          {allPlayersReady && (
            <div className="ready-players-count">
              –ì–æ—Ç–æ–≤–æ –∏–≥—Ä–æ–∫–æ–≤: {players.filter(p => playerChoices[p.id]).length}/{players.length}
            </div>
          )}
        </div>

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Ö–æ—Å—Ç–∞ */}
        {isHost() && (
          <div className="race-controls">
            <button
              className={`start-race-btn ${allPlayersReady ? 'active' : ''}`}
              onClick={startRace}
              disabled={!allPlayersReady}
            >
              {allPlayersReady ? 'üöÄ –°–¢–ê–†–¢ –ì–û–ù–ö–ò!' : '–ù–µ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±—Ä–∞–ª–∏ –≥–æ–Ω—â–∏–∫–æ–≤'}
            </button>
          </div>
        )}       
      </div>
    </div>
  );
};

export default App;